{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Children, cloneElement, useMemo, useState } from 'react';\nimport { AccordionPanelContext } from './AccordionPanelContext';\nexport const AccordionPanel = _ref => {\n  let {\n    children,\n    open,\n    flush\n  } = _ref;\n  const [isOpen, setIsOpen] = useState(open);\n  const items = useMemo(() => Children.map(children, child => cloneElement(child)), [children]);\n  return _jsx(AccordionPanelContext.Provider, {\n    value: {\n      flush,\n      isOpen,\n      setIsOpen\n    },\n    children: items\n  });\n};","map":{"version":3,"names":["jsx","_jsx","Children","cloneElement","useMemo","useState","AccordionPanelContext","AccordionPanel","children","open","flush","isOpen","setIsOpen","items","map","child","Provider","value"],"sources":["/Users/kamalnayanupadhyay/Documents/fcb/fcb/node_modules/flowbite-react/lib/esm/components/Accordion/AccordionPanel.js"],"sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Children, cloneElement, useMemo, useState } from 'react';\nimport { AccordionPanelContext } from './AccordionPanelContext';\nexport const AccordionPanel = ({ children, open, flush }) => {\n    const [isOpen, setIsOpen] = useState(open);\n    const items = useMemo(() => Children.map(children, (child) => cloneElement(child)), [children]);\n    return _jsx(AccordionPanelContext.Provider, { value: { flush, isOpen, setIsOpen }, children: items });\n};\n"],"mappings":"AAAA,SAASA,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,SAASC,QAAT,EAAmBC,YAAnB,EAAiCC,OAAjC,EAA0CC,QAA1C,QAA0D,OAA1D;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AACA,OAAO,MAAMC,cAAc,GAAG,QAA+B;EAAA,IAA9B;IAAEC,QAAF;IAAYC,IAAZ;IAAkBC;EAAlB,CAA8B;EACzD,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAACI,IAAD,CAApC;EACA,MAAMI,KAAK,GAAGT,OAAO,CAAC,MAAMF,QAAQ,CAACY,GAAT,CAAaN,QAAb,EAAwBO,KAAD,IAAWZ,YAAY,CAACY,KAAD,CAA9C,CAAP,EAA+D,CAACP,QAAD,CAA/D,CAArB;EACA,OAAOP,IAAI,CAACK,qBAAqB,CAACU,QAAvB,EAAiC;IAAEC,KAAK,EAAE;MAAEP,KAAF;MAASC,MAAT;MAAiBC;IAAjB,CAAT;IAAuCJ,QAAQ,EAAEK;EAAjD,CAAjC,CAAX;AACH,CAJM"},"metadata":{},"sourceType":"module"}